agents:
  r_0:
    capacity: 1000
  r_1:
    capacity: 1000
  r_2:
    capacity: 1000
  r_3:
    capacity: 1000
  r_4:
    capacity: 1000
constraints:
  cost_0:
    function: "if 'solve_tsp_local_search' not in dir():\n from python_tsp.heuristics\
      \ import solve_tsp_local_search\nif 'numpy' not in dir(): import numpy\nif 'networkx'\
      \ not in dir(): import networkx\nv = []\nw_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
      vars = [x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_10,x_11,x_12,x_13,x_14,x_15,x_16,x_17,x_18,x_19,x_20]\n\
      G = networkx.from_edgelist([(0, 1, {'weight': 26.739987923218855}), (0, 4, {'weight':\
      \ 76.41384479114136}), (0, 0, {'weight': 0.0}), (1, 2, {'weight': 30.99379727783789}),\
      \ (1, 3, {'weight': 30.623260956071345}), (1, 1, {'weight': 0.0}), (2, 3, {'weight':\
      \ 33.46566221000899}), (2, 2, {'weight': 0.0}), (3, 4, {'weight': 58.10332577423876}),\
      \ (3, 3, {'weight': 0.0}), (4, 5, {'weight': 51.3768810554712}), (4, 11, {'weight':\
      \ 73.45537913960446}), (4, 17, {'weight': 38.253588776603145}), (4, 4, {'weight':\
      \ 0.0}), (5, 10, {'weight': 54.54952563071185}), (5, 6, {'weight': 55.66939299911648}),\
      \ (5, 5, {'weight': 0.0}), (6, 7, {'weight': 57.5802095874521}), (6, 6, {'weight':\
      \ 0.0}), (7, 8, {'weight': 50.347514611308505}), (7, 10, {'weight': 47.771297210913154}),\
      \ (7, 7, {'weight': 0.0}), (8, 9, {'weight': 45.12854306760559}), (8, 8, {'weight':\
      \ 0.0}), (9, 10, {'weight': 56.84377625445905}), (9, 12, {'weight': 23.248267222451545}),\
      \ (9, 9, {'weight': 0.0}), (10, 11, {'weight': 23.59030394994295}), (10, 10,\
      \ {'weight': 0.0}), (11, 20, {'weight': 37.51068618095671}), (11, 12, {'weight':\
      \ 61.068553482604045}), (11, 11, {'weight': 0.0}), (12, 13, {'weight': 54.06819818346902}),\
      \ (12, 12, {'weight': 0.0}), (13, 14, {'weight': 43.66956886666445}), (13, 16,\
      \ {'weight': 33.298228423310114}), (13, 19, {'weight': 42.932903069957256}),\
      \ (13, 13, {'weight': 0.0}), (14, 15, {'weight': 29.022682645461476}), (14,\
      \ 14, {'weight': 0.0}), (15, 16, {'weight': 42.89693500877596}), (15, 15, {'weight':\
      \ 0.0}), (16, 16, {'weight': 0.0}), (17, 18, {'weight': 45.97858198834076}),\
      \ (17, 20, {'weight': 29.131132129473823}), (17, 17, {'weight': 0.0}), (18,\
      \ 19, {'weight': 24.11981701391428}), (18, 18, {'weight': 0.0}), (19, 20, {'weight':\
      \ 26.81414602477836}), (19, 19, {'weight': 0.0}), (20, 20, {'weight': 0.0})])\n\
      v = [wid for w, wid in enumerate(w_ids) if vars[w] == 0]\nv += [wid for wid\
      \ in []]\nif len(v) <= 1: return 0\ntable = numpy.zeros((len(v), len(v)))\n\
      for ind1, t1 in enumerate(v):\n   for ind2, t2 in enumerate(v[ind1+1:]):\n \
      \      path = networkx.shortest_path(G, source=t1, target=t2, weight='weight')\n\
      \       dist = networkx.path_weight(G, path, weight='weight')\n       table[ind1,\
      \ ind1+ind2+1] = dist\n       table[ind1+ind2+1, ind1] = dist\npermutation,\
      \ distance = solve_tsp_local_search(table, perturbation_scheme='ps1')\nreturn\
      \ distance**4"
    type: intention
  cost_1:
    function: "if 'solve_tsp_local_search' not in dir():\n from python_tsp.heuristics\
      \ import solve_tsp_local_search\nif 'numpy' not in dir(): import numpy\nif 'networkx'\
      \ not in dir(): import networkx\nv = []\nw_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
      vars = [x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_10,x_11,x_12,x_13,x_14,x_15,x_16,x_17,x_18,x_19,x_20]\n\
      G = networkx.from_edgelist([(0, 1, {'weight': 26.739987923218855}), (0, 4, {'weight':\
      \ 76.41384479114136}), (0, 0, {'weight': 0.0}), (1, 2, {'weight': 30.99379727783789}),\
      \ (1, 3, {'weight': 30.623260956071345}), (1, 1, {'weight': 0.0}), (2, 3, {'weight':\
      \ 33.46566221000899}), (2, 2, {'weight': 0.0}), (3, 4, {'weight': 58.10332577423876}),\
      \ (3, 3, {'weight': 0.0}), (4, 5, {'weight': 51.3768810554712}), (4, 11, {'weight':\
      \ 73.45537913960446}), (4, 17, {'weight': 38.253588776603145}), (4, 4, {'weight':\
      \ 0.0}), (5, 10, {'weight': 54.54952563071185}), (5, 6, {'weight': 55.66939299911648}),\
      \ (5, 5, {'weight': 0.0}), (6, 7, {'weight': 57.5802095874521}), (6, 6, {'weight':\
      \ 0.0}), (7, 8, {'weight': 50.347514611308505}), (7, 10, {'weight': 47.771297210913154}),\
      \ (7, 7, {'weight': 0.0}), (8, 9, {'weight': 45.12854306760559}), (8, 8, {'weight':\
      \ 0.0}), (9, 10, {'weight': 56.84377625445905}), (9, 12, {'weight': 23.248267222451545}),\
      \ (9, 9, {'weight': 0.0}), (10, 11, {'weight': 23.59030394994295}), (10, 10,\
      \ {'weight': 0.0}), (11, 20, {'weight': 37.51068618095671}), (11, 12, {'weight':\
      \ 61.068553482604045}), (11, 11, {'weight': 0.0}), (12, 13, {'weight': 54.06819818346902}),\
      \ (12, 12, {'weight': 0.0}), (13, 14, {'weight': 43.66956886666445}), (13, 16,\
      \ {'weight': 33.298228423310114}), (13, 19, {'weight': 42.932903069957256}),\
      \ (13, 13, {'weight': 0.0}), (14, 15, {'weight': 29.022682645461476}), (14,\
      \ 14, {'weight': 0.0}), (15, 16, {'weight': 42.89693500877596}), (15, 15, {'weight':\
      \ 0.0}), (16, 16, {'weight': 0.0}), (17, 18, {'weight': 45.97858198834076}),\
      \ (17, 20, {'weight': 29.131132129473823}), (17, 17, {'weight': 0.0}), (18,\
      \ 19, {'weight': 24.11981701391428}), (18, 18, {'weight': 0.0}), (19, 20, {'weight':\
      \ 26.81414602477836}), (19, 19, {'weight': 0.0}), (20, 20, {'weight': 0.0})])\n\
      v = [wid for w, wid in enumerate(w_ids) if vars[w] == 1]\nv += [wid for wid\
      \ in []]\nif len(v) <= 1: return 0\ntable = numpy.zeros((len(v), len(v)))\n\
      for ind1, t1 in enumerate(v):\n   for ind2, t2 in enumerate(v[ind1+1:]):\n \
      \      path = networkx.shortest_path(G, source=t1, target=t2, weight='weight')\n\
      \       dist = networkx.path_weight(G, path, weight='weight')\n       table[ind1,\
      \ ind1+ind2+1] = dist\n       table[ind1+ind2+1, ind1] = dist\npermutation,\
      \ distance = solve_tsp_local_search(table, perturbation_scheme='ps1')\nreturn\
      \ distance**4"
    type: intention
  cost_2:
    function: "if 'solve_tsp_local_search' not in dir():\n from python_tsp.heuristics\
      \ import solve_tsp_local_search\nif 'numpy' not in dir(): import numpy\nif 'networkx'\
      \ not in dir(): import networkx\nv = []\nw_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
      vars = [x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_10,x_11,x_12,x_13,x_14,x_15,x_16,x_17,x_18,x_19,x_20]\n\
      G = networkx.from_edgelist([(0, 1, {'weight': 26.739987923218855}), (0, 4, {'weight':\
      \ 76.41384479114136}), (0, 0, {'weight': 0.0}), (1, 2, {'weight': 30.99379727783789}),\
      \ (1, 3, {'weight': 30.623260956071345}), (1, 1, {'weight': 0.0}), (2, 3, {'weight':\
      \ 33.46566221000899}), (2, 2, {'weight': 0.0}), (3, 4, {'weight': 58.10332577423876}),\
      \ (3, 3, {'weight': 0.0}), (4, 5, {'weight': 51.3768810554712}), (4, 11, {'weight':\
      \ 73.45537913960446}), (4, 17, {'weight': 38.253588776603145}), (4, 4, {'weight':\
      \ 0.0}), (5, 10, {'weight': 54.54952563071185}), (5, 6, {'weight': 55.66939299911648}),\
      \ (5, 5, {'weight': 0.0}), (6, 7, {'weight': 57.5802095874521}), (6, 6, {'weight':\
      \ 0.0}), (7, 8, {'weight': 50.347514611308505}), (7, 10, {'weight': 47.771297210913154}),\
      \ (7, 7, {'weight': 0.0}), (8, 9, {'weight': 45.12854306760559}), (8, 8, {'weight':\
      \ 0.0}), (9, 10, {'weight': 56.84377625445905}), (9, 12, {'weight': 23.248267222451545}),\
      \ (9, 9, {'weight': 0.0}), (10, 11, {'weight': 23.59030394994295}), (10, 10,\
      \ {'weight': 0.0}), (11, 20, {'weight': 37.51068618095671}), (11, 12, {'weight':\
      \ 61.068553482604045}), (11, 11, {'weight': 0.0}), (12, 13, {'weight': 54.06819818346902}),\
      \ (12, 12, {'weight': 0.0}), (13, 14, {'weight': 43.66956886666445}), (13, 16,\
      \ {'weight': 33.298228423310114}), (13, 19, {'weight': 42.932903069957256}),\
      \ (13, 13, {'weight': 0.0}), (14, 15, {'weight': 29.022682645461476}), (14,\
      \ 14, {'weight': 0.0}), (15, 16, {'weight': 42.89693500877596}), (15, 15, {'weight':\
      \ 0.0}), (16, 16, {'weight': 0.0}), (17, 18, {'weight': 45.97858198834076}),\
      \ (17, 20, {'weight': 29.131132129473823}), (17, 17, {'weight': 0.0}), (18,\
      \ 19, {'weight': 24.11981701391428}), (18, 18, {'weight': 0.0}), (19, 20, {'weight':\
      \ 26.81414602477836}), (19, 19, {'weight': 0.0}), (20, 20, {'weight': 0.0})])\n\
      v = [wid for w, wid in enumerate(w_ids) if vars[w] == 2]\nv += [wid for wid\
      \ in []]\nif len(v) <= 1: return 0\ntable = numpy.zeros((len(v), len(v)))\n\
      for ind1, t1 in enumerate(v):\n   for ind2, t2 in enumerate(v[ind1+1:]):\n \
      \      path = networkx.shortest_path(G, source=t1, target=t2, weight='weight')\n\
      \       dist = networkx.path_weight(G, path, weight='weight')\n       table[ind1,\
      \ ind1+ind2+1] = dist\n       table[ind1+ind2+1, ind1] = dist\npermutation,\
      \ distance = solve_tsp_local_search(table, perturbation_scheme='ps1')\nreturn\
      \ distance**4"
    type: intention
  cost_3:
    function: "if 'solve_tsp_local_search' not in dir():\n from python_tsp.heuristics\
      \ import solve_tsp_local_search\nif 'numpy' not in dir(): import numpy\nif 'networkx'\
      \ not in dir(): import networkx\nv = []\nw_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
      vars = [x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_10,x_11,x_12,x_13,x_14,x_15,x_16,x_17,x_18,x_19,x_20]\n\
      G = networkx.from_edgelist([(0, 1, {'weight': 26.739987923218855}), (0, 4, {'weight':\
      \ 76.41384479114136}), (0, 0, {'weight': 0.0}), (1, 2, {'weight': 30.99379727783789}),\
      \ (1, 3, {'weight': 30.623260956071345}), (1, 1, {'weight': 0.0}), (2, 3, {'weight':\
      \ 33.46566221000899}), (2, 2, {'weight': 0.0}), (3, 4, {'weight': 58.10332577423876}),\
      \ (3, 3, {'weight': 0.0}), (4, 5, {'weight': 51.3768810554712}), (4, 11, {'weight':\
      \ 73.45537913960446}), (4, 17, {'weight': 38.253588776603145}), (4, 4, {'weight':\
      \ 0.0}), (5, 10, {'weight': 54.54952563071185}), (5, 6, {'weight': 55.66939299911648}),\
      \ (5, 5, {'weight': 0.0}), (6, 7, {'weight': 57.5802095874521}), (6, 6, {'weight':\
      \ 0.0}), (7, 8, {'weight': 50.347514611308505}), (7, 10, {'weight': 47.771297210913154}),\
      \ (7, 7, {'weight': 0.0}), (8, 9, {'weight': 45.12854306760559}), (8, 8, {'weight':\
      \ 0.0}), (9, 10, {'weight': 56.84377625445905}), (9, 12, {'weight': 23.248267222451545}),\
      \ (9, 9, {'weight': 0.0}), (10, 11, {'weight': 23.59030394994295}), (10, 10,\
      \ {'weight': 0.0}), (11, 20, {'weight': 37.51068618095671}), (11, 12, {'weight':\
      \ 61.068553482604045}), (11, 11, {'weight': 0.0}), (12, 13, {'weight': 54.06819818346902}),\
      \ (12, 12, {'weight': 0.0}), (13, 14, {'weight': 43.66956886666445}), (13, 16,\
      \ {'weight': 33.298228423310114}), (13, 19, {'weight': 42.932903069957256}),\
      \ (13, 13, {'weight': 0.0}), (14, 15, {'weight': 29.022682645461476}), (14,\
      \ 14, {'weight': 0.0}), (15, 16, {'weight': 42.89693500877596}), (15, 15, {'weight':\
      \ 0.0}), (16, 16, {'weight': 0.0}), (17, 18, {'weight': 45.97858198834076}),\
      \ (17, 20, {'weight': 29.131132129473823}), (17, 17, {'weight': 0.0}), (18,\
      \ 19, {'weight': 24.11981701391428}), (18, 18, {'weight': 0.0}), (19, 20, {'weight':\
      \ 26.81414602477836}), (19, 19, {'weight': 0.0}), (20, 20, {'weight': 0.0})])\n\
      v = [wid for w, wid in enumerate(w_ids) if vars[w] == 3]\nv += [wid for wid\
      \ in []]\nif len(v) <= 1: return 0\ntable = numpy.zeros((len(v), len(v)))\n\
      for ind1, t1 in enumerate(v):\n   for ind2, t2 in enumerate(v[ind1+1:]):\n \
      \      path = networkx.shortest_path(G, source=t1, target=t2, weight='weight')\n\
      \       dist = networkx.path_weight(G, path, weight='weight')\n       table[ind1,\
      \ ind1+ind2+1] = dist\n       table[ind1+ind2+1, ind1] = dist\npermutation,\
      \ distance = solve_tsp_local_search(table, perturbation_scheme='ps1')\nreturn\
      \ distance**4"
    type: intention
  cost_4:
    function: "if 'solve_tsp_local_search' not in dir():\n from python_tsp.heuristics\
      \ import solve_tsp_local_search\nif 'numpy' not in dir(): import numpy\nif 'networkx'\
      \ not in dir(): import networkx\nv = []\nw_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
      vars = [x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9,x_10,x_11,x_12,x_13,x_14,x_15,x_16,x_17,x_18,x_19,x_20]\n\
      G = networkx.from_edgelist([(0, 1, {'weight': 26.739987923218855}), (0, 4, {'weight':\
      \ 76.41384479114136}), (0, 0, {'weight': 0.0}), (1, 2, {'weight': 30.99379727783789}),\
      \ (1, 3, {'weight': 30.623260956071345}), (1, 1, {'weight': 0.0}), (2, 3, {'weight':\
      \ 33.46566221000899}), (2, 2, {'weight': 0.0}), (3, 4, {'weight': 58.10332577423876}),\
      \ (3, 3, {'weight': 0.0}), (4, 5, {'weight': 51.3768810554712}), (4, 11, {'weight':\
      \ 73.45537913960446}), (4, 17, {'weight': 38.253588776603145}), (4, 4, {'weight':\
      \ 0.0}), (5, 10, {'weight': 54.54952563071185}), (5, 6, {'weight': 55.66939299911648}),\
      \ (5, 5, {'weight': 0.0}), (6, 7, {'weight': 57.5802095874521}), (6, 6, {'weight':\
      \ 0.0}), (7, 8, {'weight': 50.347514611308505}), (7, 10, {'weight': 47.771297210913154}),\
      \ (7, 7, {'weight': 0.0}), (8, 9, {'weight': 45.12854306760559}), (8, 8, {'weight':\
      \ 0.0}), (9, 10, {'weight': 56.84377625445905}), (9, 12, {'weight': 23.248267222451545}),\
      \ (9, 9, {'weight': 0.0}), (10, 11, {'weight': 23.59030394994295}), (10, 10,\
      \ {'weight': 0.0}), (11, 20, {'weight': 37.51068618095671}), (11, 12, {'weight':\
      \ 61.068553482604045}), (11, 11, {'weight': 0.0}), (12, 13, {'weight': 54.06819818346902}),\
      \ (12, 12, {'weight': 0.0}), (13, 14, {'weight': 43.66956886666445}), (13, 16,\
      \ {'weight': 33.298228423310114}), (13, 19, {'weight': 42.932903069957256}),\
      \ (13, 13, {'weight': 0.0}), (14, 15, {'weight': 29.022682645461476}), (14,\
      \ 14, {'weight': 0.0}), (15, 16, {'weight': 42.89693500877596}), (15, 15, {'weight':\
      \ 0.0}), (16, 16, {'weight': 0.0}), (17, 18, {'weight': 45.97858198834076}),\
      \ (17, 20, {'weight': 29.131132129473823}), (17, 17, {'weight': 0.0}), (18,\
      \ 19, {'weight': 24.11981701391428}), (18, 18, {'weight': 0.0}), (19, 20, {'weight':\
      \ 26.81414602477836}), (19, 19, {'weight': 0.0}), (20, 20, {'weight': 0.0})])\n\
      v = [wid for w, wid in enumerate(w_ids) if vars[w] == 4]\nv += [wid for wid\
      \ in []]\nif len(v) <= 1: return 0\ntable = numpy.zeros((len(v), len(v)))\n\
      for ind1, t1 in enumerate(v):\n   for ind2, t2 in enumerate(v[ind1+1:]):\n \
      \      path = networkx.shortest_path(G, source=t1, target=t2, weight='weight')\n\
      \       dist = networkx.path_weight(G, path, weight='weight')\n       table[ind1,\
      \ ind1+ind2+1] = dist\n       table[ind1+ind2+1, ind1] = dist\npermutation,\
      \ distance = solve_tsp_local_search(table, perturbation_scheme='ps1')\nreturn\
      \ distance**4"
    type: intention
domains:
  d_0:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_1:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_10:
    values:
    - 2
    - 3
    - 4
  d_11:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_12:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_13:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_14:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_15:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_16:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_17:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_18:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_19:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_2:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_20:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_3:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_4:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_5:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_6:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_7:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_8:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
  d_9:
    values:
    - 0
    - 1
    - 2
    - 3
    - 4
name: test_mrpp
objective: min
variables:
  x_0:
    domain: d_0
    initial_value: 4
  x_1:
    domain: d_1
    initial_value: 4
  x_10:
    domain: d_10
    initial_value: 4
  x_11:
    domain: d_11
    initial_value: 0
  x_12:
    domain: d_12
    initial_value: 4
  x_13:
    domain: d_13
    initial_value: 3
  x_14:
    domain: d_14
    initial_value: 3
  x_15:
    domain: d_15
    initial_value: 0
  x_16:
    domain: d_16
    initial_value: 1
  x_17:
    domain: d_17
    initial_value: 0
  x_18:
    domain: d_18
    initial_value: 2
  x_19:
    domain: d_19
    initial_value: 0
  x_2:
    domain: d_2
    initial_value: 3
  x_20:
    domain: d_20
    initial_value: 3
  x_3:
    domain: d_3
    initial_value: 1
  x_4:
    domain: d_4
    initial_value: 3
  x_5:
    domain: d_5
    initial_value: 2
  x_6:
    domain: d_6
    initial_value: 0
  x_7:
    domain: d_7
    initial_value: 3
  x_8:
    domain: d_8
    initial_value: 0
  x_9:
    domain: d_9
    initial_value: 2
